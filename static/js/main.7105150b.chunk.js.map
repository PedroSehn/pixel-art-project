{"version":3,"sources":["components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Editor.js","components/App.js","reportWebVitals.js","index.js"],"names":["Pixel","props","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","changeColor","setChangeColor","className","style","backgroundColor","onClick","onMouseEnter","onMouseLeave","Row","width","pixels","i","push","DrawingPanel","height","rows","panelRef","useRef","id","ref","exportComponentAsPNG","Editor","panelWidth","setPanelWidth","panelHeight","setPanelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","type","defaultValue","onChange","e","target","value","color","onChangeComplete","hex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7105150b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Pixel(props){\n    const { selectedColor } = props;\n\n    const [pixelColor, setPixelColor] = useState(\"#fff\");\n    const [oldColor, setOldColor] = useState(pixelColor);\n    const [changeColor, setChangeColor] = useState(true);\n\n    const applyColor = () => { setPixelColor(selectedColor); setChangeColor(false); };\n    const changeColorOnHover = () => { setOldColor(pixelColor); setPixelColor(selectedColor) }\n    const resetColor = () =>  { if(changeColor){setPixelColor(oldColor)}; setChangeColor(true)}\n\n    return(\n        <div className=\"pixel\" style={{ backgroundColor: pixelColor }}\n        onClick={applyColor}\n        onMouseEnter={changeColorOnHover}\n        onMouseLeave={resetColor}\n        > </div>\n     )\n}\n\nexport default Pixel;","import React from \"react\";\nimport Pixel from './Pixel';\n\nfunction Row(props){\n    const { width, selectedColor } = props;\n\n    let pixels = [];\n\n    for(let i = 0; i < width; i++){\n        pixels.push(<Pixel key={ i } selectedColor={ selectedColor }/>)\n    }\n    return(\n        <div className=\"row\"> {pixels} </div>\n     )\n}\n\nexport default Row;","import React, { useRef } from \"react\";\nimport Row from './Row'\nimport { exportComponentAsPNG } from \"react-component-export-image\";\nfunction DrawingPanel(props){\n    const {width, height, selectedColor } = props;\n    let rows = [];\n    const panelRef = useRef();\n    for(let i = 0; i < height; i++){\n        rows.push(<Row key={ i } width={ width } selectedColor={ selectedColor } />)\n    }\n    \n    return(\n        <div id=\"drawing-panel\"> \n            <section ref={panelRef} id=\"pixels\">\n                {rows}\n            </section>\n            <button onClick={ () => exportComponentAsPNG(panelRef)}>Exportar PNG</button>\n        </div>\n     )\n}\n\nexport default DrawingPanel;","import React, { useState } from \"react\";\nimport '../styles/Editor.css'\nimport { CirclePicker } from 'react-color';\nimport DrawingPanel from './DrawingPanel';\n\nfunction Editor(){\n    const [panelWidth, setPanelWidth] = useState(16);\n    const [panelHeight, setPanelHeight] = useState(16);\n    const [hideOptions, setHideOptions] = useState(false);\n    const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\n    const [buttonText, setButtonText] = useState(\"Começar\");\n    const [selectedColor, setColor] = useState(\"#f44336\");\n    \n    const initializeDrawingPanel = () => {\n        // Quando iniciar o painel, esconde as opções, mostrar o painel e muda o texto do botão para \"Reiniciar\";\n        // Quando iniciarmos novmente, mostra as opões, esconde o painel e muda o texto do botão para \"Começar\";\n        // Assim, podemos reaproveitar o botão;\n        \n        setHideOptions(!hideOptions);\n        setHideDrawingPanel(!hideDrawingPanel);\n\n        buttonText === \"Começar\" ? setButtonText(\"Reiniciar\") : setButtonText(\"Começar\")\n    }\n\n\n    function changeColor(color){\n        // Seta a cor na variavel global referente a cor selecionada na grid de cores;\n        setColor(color.hex)\n    }\n    return(\n        <div id=\"editor\"> \n            <h1>Editor de Pixel</h1>\n            { hideDrawingPanel && <h2>Selecione as dimenções</h2>}\n           {hideDrawingPanel && (\n           <section id=\"options\">\n                <div className=\"option\">\n                    <input \n                    type=\"number\" \n                    className=\"panelInput\" \n                    defaultValue={panelWidth} \n                    onChange={(e) => {setPanelWidth(e.target.value)} }\n                    ></input>\n                     <span>Largura</span>\n                </div>\n               \n                <div className=\"option\">\n                <input \n                    type=\"number\" \n                    className=\"panelInput\" \n                    defaultValue={panelHeight}\n                    onChange={(e) => {setPanelHeight(e.target.value)} }\n                    ></input>\n                    <span>Altura</span>\n                </div>   \n            </section>)}\n            \n\n            {hideOptions && (<CirclePicker color={selectedColor} onChangeComplete={changeColor}/>)}\n            \n            {hideOptions && (<DrawingPanel \n            width={panelWidth}\n            height={panelHeight}\n            selectedColor={selectedColor}\n            />)}\n            <button className=\"button\" onClick={initializeDrawingPanel}>{buttonText}</button>\n        </div>\n     )\n}\n\nexport default Editor;","import React from 'react';\nimport '../styles/App.css';\nimport Editor from './Editor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}